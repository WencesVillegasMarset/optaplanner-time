/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.audienciaTimeGrain.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import org.optaplanner.examples.audienciaTimeGrain.domain.Audiencia;
import org.optaplanner.examples.audienciaTimeGrain.domain.AudienciaAssignment;
import org.optaplanner.examples.audienciaTimeGrain.domain.AudienciaSchedule;
import org.optaplanner.examples.audienciaTimeGrain.domain.Room;
import org.optaplanner.examples.audienciaTimeGrain.domain.TimeGrain;
import org.optaplanner.examples.audienciaTimeGrain.domain.Day;
import org.optaplanner.examples.audienciaTimeGrain.domain.Juez;
import org.optaplanner.examples.audienciaTimeGrain.domain.Fiscal;
import org.optaplanner.examples.audienciaTimeGrain.domain.Defensor;
import org.optaplanner.examples.audienciaTimeGrain.domain.Querellante;
import org.optaplanner.examples.audienciaTimeGrain.domain.Asesor;
import java.util.List;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints usually
// ############################################################################

rule "Room conflict"
    when
        $leftAssignment : AudienciaAssignment(scorable, room != null, $leftId : id, $room : room)
        $rightAssignment : AudienciaAssignment(scorable, room == $room, calculateOverlap($leftAssignment) > 0, id != $leftId)
    then
        scoreHolder.penalize(kcontext, $rightAssignment.calculateOverlap($leftAssignment));
end

rule "Don't go in overtime"
    when
        AudienciaAssignment(scorable, startingTimeGrain != null, $lastTimeGrainIndex : lastTimeGrainIndex)
        not TimeGrain(grainIndex == $lastTimeGrainIndex)
    then
        scoreHolder.penalize(kcontext, $lastTimeGrainIndex);
end

rule "Don't start after maximum starting time of the day"
    when
        $day : Day($lastStartingMinute : lastStartingMinute)
        AudienciaAssignment(scorable, startingTimeGrain != null, $startingTimeGrainIndex : startingTimeGrainIndex)
        $timegrain : TimeGrain(day == $day, grainIndex == $startingTimeGrainIndex, startingMinuteOfDay > $lastStartingMinute)
    then
        scoreHolder.penalize(kcontext, $timegrain.getStartingMinuteOfDay() - $lastStartingMinute);
end

//rule "Avoid Mid-break"
//    when
//        $left: AudienciaAssignment(startingTimeGrain != null, $lastTimeGrainIndex : getLastTimeGrainIndex(), $startTimeGrainIndex : startingTimeGrainIndex, $audiencia : audiencia);
//        Audiencia(idAudiencia == $audiencia.getIdAudiencia(), $duration : numTimeGrains)
//        TimeGrain(grainIndex == $startTimeGrainIndex, $firstStartingMinute : startingMinuteOfDay)
//        TimeGrain(grainIndex == $lastTimeGrainIndex, startingMinuteOfDay != $firstStartingMinute + ($duration - 1) * GRAIN_LENGTH_IN_MINUTES)
//    then
//        scoreHolder.penalize(kcontext);
//end

rule "Start and end on same day"
    when
        AudienciaAssignment(scorable, startingTimeGrain != null, $firstTimeGrain : startingTimeGrain, $lastTimeGrainIndex : getLastTimeGrainIndex())
        $lastTimeGrain : TimeGrain(grainIndex == $lastTimeGrainIndex, $firstTimeGrain.getDay() != getDay())
    then
        scoreHolder.penalize(kcontext);
end

rule "Do not conflict Juez"
       when
           $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaLeft : getAudiencia(), $id : id)
           $valueLeft : Juez() from $audienciaLeft.getJuezList()
           $rightAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaRight : getAudiencia(), id != $id)
           Juez(idJuez == $valueLeft.idJuez) from $audienciaRight.getJuezList()
           $overlap : Number(intValue() > 0) from $rightAssignment.calculateOverlap($leftAssignment)
       then
           scoreHolder.penalize(kcontext, $overlap.intValue());
end

rule "Do not conflict Defensor"
    when
       $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaLeft : getAudiencia(), $id : id)
       $valueLeft : Defensor() from $audienciaLeft.getDefensorList()
       $rightAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaRight : getAudiencia(), id != $id)
       Defensor(idDefensor == $valueLeft.idDefensor) from $audienciaRight.getDefensorList()
       $overlap : Number(intValue() > 0) from $rightAssignment.calculateOverlap($leftAssignment)
    then
       scoreHolder.penalize(kcontext, $overlap.intValue());
end

rule "Do not conflict Fiscal"
    when
       $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaLeft : getAudiencia(), $id : id)
       $valueLeft : Fiscal() from $audienciaLeft.getFiscalList()
       $rightAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaRight : getAudiencia(), id != $id)
       Fiscal(idFiscal == $valueLeft.idFiscal) from $audienciaRight.getFiscalList()
       $overlap : Number(intValue() > 0) from $rightAssignment.calculateOverlap($leftAssignment)
    then
       scoreHolder.penalize(kcontext, $overlap.intValue());
end

rule "Do not conflict Querellante"
    when
        $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaLeft : getAudiencia(), $id : id)
        $valueLeft : Querellante() from $audienciaLeft.getQuerellanteList()
        $rightAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaRight : getAudiencia(), id != $id)
        Querellante(idQuerellante == $valueLeft.idQuerellante) from $audienciaRight.getQuerellanteList()
        $overlap : Number(intValue() > 0) from $rightAssignment.calculateOverlap($leftAssignment)
    then
        scoreHolder.penalize(kcontext, $overlap.intValue());
end

rule "Do not conflict Asesor"
    when
            $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaLeft : getAudiencia(), $id : id)
            $valueLeft : Asesor() from $audienciaLeft.getAsesorList()
            $rightAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $audienciaRight : getAudiencia(), id != $id)
            Asesor(idAsesor == $valueLeft.idAsesor) from $audienciaRight.getAsesorList()
            $overlap : Number(intValue() > 0) from $rightAssignment.calculateOverlap($leftAssignment)
        then
            scoreHolder.penalize(kcontext, $overlap.intValue());
end

rule "Do not use room in prohibited time"
    when
        $timeGrain : TimeGrain(grainIndex != null)
        AudienciaAssignment(scorable, room!= null, startingTimeGrain != null, timeGrainRoomRestriction($timeGrain) == true)
    then
        scoreHolder.penalize(kcontext);
end

rule "Do not conflict Juez with TimeGrain"
    when
        $audienciaAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, timeGrainJuezRestriction() > 0)
    then
        scoreHolder.penalize(kcontext, $audienciaAssignment.timeGrainJuezRestriction());
end

rule "Respect Minimum Starting Time"
    when
        $left : AudienciaAssignment(scorable, startingTimeGrain != null, isMinimumStartingTime() > 0)
    then
        scoreHolder.penalize(kcontext, $left.isMinimumStartingTime());
end

rule "Respect Maximum Starting Time"
    when
        $left : AudienciaAssignment(scorable, startingTimeGrain != null, isMaximumStartingTime() > 0)
    then
        scoreHolder.penalize(kcontext, $left.isMinimumStartingTime());
end

rule "Appeals in the afternoon"
    when
        $left : AudienciaAssignment(scorable, startingTimeGrain != null, audiencia.aLaTarde, $startingTimeGrainIndex : startingTimeGrainIndex)
        TimeGrain(grainIndex == $startingTimeGrainIndex, $startingMinute : getStartingMinuteOfDay() < 780)
    then
        scoreHolder.penalize(kcontext, 780 - $startingMinute);
end



//rule "Respect Locations"
//    when
//        AudienciaAssignment(room != null, audiencia.ubicacion != room.ubicacion)
//    then
//        scoreHolder.penalize(kcontext);
//end

//rule "Dont conflict Juez with locations"
//    when
//        $leftAssignment : AudienciaAssignment($id : id,startingTimeGrain != null, $leftDay : startingTimeGrain.day, $location : audiencia.ubicacion, $juez : juez)
//        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, audiencia.ubicacion != $location, startingTimeGrain.day == $leftDay, juez == $juez)
//    then
//        scoreHolder.penalize(kcontext);
//end

//rule "Dont conflict Fiscal with locations"
//    when
//        $leftAssignment : AudienciaAssignment($id : id,startingTimeGrain != null, $leftDay : startingTimeGrain.day, $location : audiencia.ubicacion, $fiscal : fiscal)
//        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, audiencia.ubicacion != $location, startingTimeGrain.day == $leftDay, fiscal == $fiscal)
//    then
//        scoreHolder.penalize(kcontext);
//end

//rule "Dont conflict Defensor with locations"
//    when
//        $leftAssignment : AudienciaAssignment($id : id,startingTimeGrain != null, $leftDay : startingTimeGrain.day, $location : audiencia.ubicacion, $defensor : defensor)
//        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, audiencia.ubicacion != $location, startingTimeGrain.day == $leftDay, defensor == $defensor)
//    then
//        scoreHolder.penalize(kcontext);
//end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Do all meetings as soon as possible"
    when
        AudienciaAssignment(scorable, startingTimeGrain != null, $lastTimeGrainIndex : lastTimeGrainIndex)
    then
        scoreHolder.penalize(kcontext, $lastTimeGrainIndex);
end

rule "One TimeGrain break between two consecutive meetings"
    when
        $left : AudienciaAssignment(scorable, startingTimeGrain != null,  $leftEnd : getLastTimeGrainIndex(), $leftFirstTimeGrain : startingTimeGrain, $room : room)
        AudienciaAssignment(scorable, startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain, room == $room, isThereABreak($left) == false)
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)
    then
        scoreHolder.penalize(kcontext);
end

rule "One TimeGrain Juez"
    when
        $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $leftEnd : getLastTimeGrainIndex(),$leftFirstTimeGrain : startingTimeGrain, $audienciaLeft : getAudiencia(), $id : id)
        $valueLeft : Juez() from $audienciaLeft.getJuezList()
        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain, $audienciaRight : getAudiencia())
        Juez(idJuez == $valueLeft.idJuez) from $audienciaRight.getJuezList()
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)
    then
        scoreHolder.penalize(kcontext);
end

rule "One TimeGrain Defensor"
    when
        $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $leftEnd : getLastTimeGrainIndex(),$leftFirstTimeGrain : startingTimeGrain, $audienciaLeft : getAudiencia(), $id : id)
        $valueLeft : Defensor() from $audienciaLeft.getDefensorList()
        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain, $audienciaRight : getAudiencia())
        Defensor(idDefensor == $valueLeft.idDefensor) from $audienciaRight.getDefensorList()
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)

    then
        scoreHolder.penalize(kcontext);
end

rule "One TimeGrain Fiscal"
    when
        $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $leftEnd : getLastTimeGrainIndex(),$leftFirstTimeGrain : startingTimeGrain, $audienciaLeft : getAudiencia(), $id : id)
        $valueLeft : Fiscal() from $audienciaLeft.getFiscalList()
        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain, $audienciaRight : getAudiencia())
        Fiscal(idFiscal == $valueLeft.idFiscal) from $audienciaRight.getFiscalList()
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)
    then
        scoreHolder.penalize(kcontext);
end

rule "One TimeGrain Querellante"
    when
        $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $leftEnd : getLastTimeGrainIndex(),$leftFirstTimeGrain : startingTimeGrain, $audienciaLeft : getAudiencia(), $id : id)
        $valueLeft : Querellante() from $audienciaLeft.getQuerellanteList()
        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain, $audienciaRight : getAudiencia())
        Querellante(idQuerellante == $valueLeft.idQuerellante) from $audienciaRight.getQuerellanteList()
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)
    then
        scoreHolder.penalize(kcontext);
end

rule "One TimeGrain Asesor"
    when
        $leftAssignment : AudienciaAssignment(scorable, startingTimeGrain != null, $leftEnd : getLastTimeGrainIndex(),$leftFirstTimeGrain : startingTimeGrain, $audienciaLeft : getAudiencia(), $id : id)
        $valueLeft : Asesor() from $audienciaLeft.getAsesorList()
        $rightAssignment : AudienciaAssignment(id != $id, startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain, $audienciaRight : getAudiencia())
        Asesor(idAsesor == $valueLeft.idAsesor) from $audienciaRight.getAsesorList()
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)
    then
        scoreHolder.penalize(kcontext);
end

//rule "Distribute workload fairly"
//    when
//        $left : AudienciaAssignment($id : id, startingTimeGrain != null, $room : room)
//        $roomList : List() from collect(AudienciaAssignment(id != $id, room == $room))
//    then
//        scoreHolder.penalize(kcontext, ($roomList.size() * $roomList.size()));
//end

rule "Problematic Hearings for last"
    when
        $left : AudienciaAssignment(scorable, startingTimeGrain != null, room != null, $room : room, audiencia.riesgosa, $startingTimeGrainIndex : startingTimeGrainIndex, $day : startingTimeGrain.day.idDay, $id : id)
        AudienciaAssignment(startingTimeGrain != null, room == $room, id != $id, audiencia.riesgosa == false, startingTimeGrain.day.idDay == $day, startingTimeGrainIndex > $startingTimeGrainIndex)
    then
        scoreHolder.penalize(kcontext);
end



