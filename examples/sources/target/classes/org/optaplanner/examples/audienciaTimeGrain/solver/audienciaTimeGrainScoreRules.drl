/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.audienciaTimeGrain.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import org.optaplanner.examples.audienciaTimeGrain.domain.Audiencia;
import org.optaplanner.examples.audienciaTimeGrain.domain.AudienciaAssignment;
import org.optaplanner.examples.audienciaTimeGrain.domain.AudienciaSchedule;
import org.optaplanner.examples.audienciaTimeGrain.domain.Room;
import org.optaplanner.examples.audienciaTimeGrain.domain.TimeGrain;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints usually
// ############################################################################

rule "Room conflict"
    when
        $leftAssignment : AudienciaAssignment(room != null, $leftId : id, $room : room)
        $rightAssignment : AudienciaAssignment(room == $room, calculateOverlap($leftAssignment) > 0, id > $leftId)
    then
        scoreHolder.penalize(kcontext, $rightAssignment.calculateOverlap($leftAssignment));
end

rule "Don't go in overtime"
    when
        AudienciaAssignment(startingTimeGrain != null, $lastTimeGrainIndex : getLastTimeGrainIndex())
        not TimeGrain(grainIndex == $lastTimeGrainIndex)
    then
        scoreHolder.penalize(kcontext, $lastTimeGrainIndex);
end

rule "Start and end on same day"
    when
        AudienciaAssignment(startingTimeGrain != null, $firstTimeGrain : startingTimeGrain, $lastTimeGrainIndex : getLastTimeGrainIndex())
        $lastTimeGrain : TimeGrain(grainIndex == $lastTimeGrainIndex, $firstTimeGrain.getDay() != getDay())
    then
        scoreHolder.penalize(kcontext);
end

rule "Do not conflict Juez"
       when
           $leftAssignment : AudienciaAssignment(startingTimeGrain != null, $Juez : getJuez())
           AudienciaAssignment(calculateOverlap($leftAssignment) > 0, getJuez() == $Juez)
       then
           scoreHolder.penalize(kcontext);
end

rule "Do not conflict Defensor"
    when
        $leftAssignment : AudienciaAssignment(startingTimeGrain != null, $Defensor : getDefensor())
        AudienciaAssignment(calculateOverlap($leftAssignment) > 0, getDefensor() == $Defensor)
    then
        scoreHolder.penalize(kcontext);
end

rule "Do not conflict Fiscal"
    when
        $leftAssignment : AudienciaAssignment(startingTimeGrain != null, $Fiscal : getFiscal())
        AudienciaAssignment(calculateOverlap($leftAssignment) > 0, getFiscal() == $Fiscal)
    then
        scoreHolder.penalize(kcontext);
end

rule "Do not use room in prohibited time"
    when
        $timeGrain : TimeGrain(grainIndex != null)
        AudienciaAssignment(audiencia != null, room!= null, startingTimeGrain != null, timeGrainRoomRestriction($timeGrain) == true)
    then
        scoreHolder.penalize(kcontext);
end

// ############################################################################
// Soft constraints usually
// ############################################################################

rule "One TimeGrain break between two consecutive meetings"
    when
        $left : AudienciaAssignment(startingTimeGrain != null,  $leftEnd : getLastTimeGrainIndex(), $leftFirstTimeGrain : startingTimeGrain)
        $right: AudienciaAssignment(startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1, $rightFirstTimeGrainIndex : startingTimeGrain.grainIndex, $rightFirstTimeGrain : startingTimeGrain)
        TimeGrain(grainIndex == $rightFirstTimeGrainIndex, $leftFirstTimeGrain.day == $rightFirstTimeGrain.day)
    then
        scoreHolder.penalize(kcontext);
end

rule "Do all meetings as soon as possible"
    when
        AudienciaAssignment(startingTimeGrain != null, $lastTimeGrainIndex : lastTimeGrainIndex)
    then
        scoreHolder.penalize(kcontext, $lastTimeGrainIndex);
end



